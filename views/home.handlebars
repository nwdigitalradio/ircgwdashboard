<h1>{{title}}</h1>
<div id='basics'>
	<fieldset id="gateway">
		<legend>{{gw.gatewayCallsign}} Gateway</legend>
		<div class="left">
			<div>{{gw.model}}</div>
			<div>{{gw.hat.vendor}}&nbsp;{{gw.hat.product}}</div>
		</div>
		<div class="left">
			<div class='uptime'></div>
			<div class='cputemp'></div>
			<div class='loadavg'></div>
		</div>
	</fieldset>
	{{#each repeaters}}
	<fieldset class='repeater' data-repeater='{{callsign}}'>
	<legend>{{callsign}}</legend>
	<div class="left">
		<div class="rptrbasics">
			{{description1}}&nbsp;{{description2}}<br/>
			Frequency: <b>{{frequency}}</b> mHz. Offset: <b>{{offset}}</b><br/>
			Latitude: <b>{{latitude}}</b>&deg;&nbsp;Longitude: <b>{{longitude}}</b>&deg;&nbsp;<a href='http://maps.google.com/maps?q={{latitude}},{{longitude}}({{calsign}}' target='new'>map</a><br/>
			{{#if agl}}
			Antenna Height Above Ground <b>{{agl}}</b> meters<br/>
			{{/if}}
			{{#if rangeKms}}
			Estimated Range: <b>{{rangeKms}}</b> km<br/>
			{{/if}}
			{{#if reflector}}
			Default Reflector: <b>{{reflector}}</b><br/>
			Start on Startup: <b>{{atStartup}}</b><br/>
			Automatic Restart: <b>{{reconnect}}</b><br/>
			{{/if}}
			<a href='{{url}}' target='new'>{{url}}</a>
		</div>
		<div class='model'></div>
		<div class='hat'></div>
	</div>
	<div class="left">
		<div class="slowdata"></div>
		<div class="stats"></div>
		<div class="ambe"></div>
                <div class='uptime'></div>
                <div class='cputemp'></div>
                <div class='loadavg'></div>
	</div>
	<div class="xmissions">
		<br/>
		<h3>Recent Traffic on {{callsign}}</h3>
		<table>
			<thead>
				<tr>
					<th>Time</th>
					<th>Sender</th>
					<th>4 Char</th>
					<th>Destination</th>
					<th>Rpt1</th>
					<th>Rpt2</th>
					<th>Flags</th>
				</tr>
			</thead>
			<tbody>
			</tbody>
		</table>
	</div>
	</fieldset>	
	{{/each}}
</div>

<script>
var gw = {{{json gw}}};
var xmissions = [];
// var rptrgwdata = [];

function repeaterCall(data) {
        if (data.trim().length === 8) return data;
        if (data.trim().length === 1) {
                var callsign = gw.gatewayCallsign;
                while(callsign.length < 7) callsign += ' ';
                callsign += data.trim();
                return callsign;
        }
        return null;
}

$(function () {
	
	Object.keys(gw).forEach(function(cKey) {
		var key = String(cKey);
		if (key.startsWith("repeaterBand")) {
			var band = String(gw[cKey]);
			var rcall = repeaterCall(band);
			if (band.length > 0) {
				xmissions[rcall] = new Array();
			}
		}
	});
	var socket = io();
	socket.on('gateway', function(data) {
		if (data.uptime) {
                        $('fieldset#gateway div.uptime').html("Uptime: " + data.uptime.days + " days " + data.uptime.hms + " h:m:s");
                }

                if (data.loadavg) {
                        $('fieldset#gateway div.loadavg').html("Load Avg: 1m " + data.loadavg['1m'] + " 5m " + data.loadavg['5m'] + " 15m " + data.loadavg['15m']);
                }

                if (data.xmitreset) {
			$('tr[data-xmit]').attr("class","");
                }

                if (data.cputemp) {
                         $('fieldset#gateway div.cputemp').html("CPU Temp: " + data.cputemp.f + "&deg;F " + data.cputemp.c + "&deg;C");
                }
	});
	
	socket.on('repeater', function(data) {
		if (data.uptime) {
			$('fieldset.repeater[data-repeater="' + data.repeater + '"] div.uptime').html("Uptime: " + data.uptime.days + " days " + data.uptime.hms + " h:m:s");
		}

		if (data.loadavg) {
			$('fieldset.repeater[data-repeater="' + data.repeater + '"] div.loadavg').html("Load Avg: 1m " + data.loadavg['1m'] + " 5m " + data.loadavg['5m'] + " 15m " + data.loadavg['15m']);
		}

		if (data.cputemp) {
			 $('fieldset.repeater[data-repeater="' + data.repeater + '"] div.cputemp').html("CPU Temp: " + data.cputemp.f + "&deg;F " + data.cputemp.c + "&deg;C");
		}

		if (data.slowdata) {
			 $('fieldset.repeater[data-repeater="' + data.repeater + '"] div.slowdata').html("Data: " + data.slowdata);
		}

		if (data.model) {
			 $('fieldset.repeater[data-repeater="' + data.repeater + '"] div.model').html("Model: " + data.model);
		}

		if (data.hat) {
			 $('fieldset.repeater[data-repeater="' + data.repeater + '"] div.hat').html("Modem: " + data.hat.product + " by " + data.hat.vendor);
		}

		if (data.stats) {
			$('fieldset.repeater[data-repeater="' + data.repeater + '"] tr[data-xmit="' + data.stats.callsign + '"]').attr("class","");
			if(data.stats.my !== gw.gatewayCallsign && data.stats.my !== data.repeater)
			$('fieldset.repeater[data-repeater="' + data.repeater + '"] div.stats').html("Last Network Receive: " + data.stats.callsign + " duration " 
				+ data.stats.xmitlength + "<br/>Packet Loss: " + data.stats.packets + " " + data.stats.loss + " at " + data.datestring + "Z");
		}

		if (data.ambe) {
			$('fieldset.repeater[data-repeater="' + data.repeater + '"] tr[data-xmit="' + data.ambe.callsign + '"]').attr("class","");
			$('fieldset.repeater[data-repeater="' + data.repeater + '"] div.ambe').html("Last Radio Receive: " + data.ambe.callsign + " duration " 
				+ data.ambe.xmitlength + "<br/>Silence: " + data.ambe.silence + " BER: " + data.ambe.ber + " at " + data.datestring + "Z");
		}

		if (data.transmit) {
			if (!data.transmit.flags.startsWith('01') && data.transmit.my !== gw.gatewayCallsign && data.transmit.my !== data.repeater){
				if (xmissions[data.repeater].length > 9) {
					var x = xmissions[data.repeater].shift();
					console.log(data.repeater + " Dropped: " + x.transmit.my);
				}
				xmissions[data.repeater].push(data);
				var tbody = "";
				xmissions[data.repeater].forEach(function(xmit) {
					var txtab = "<tr>\n"; 
					txtab += "<td>" + xmit.datestring + "</td>\n";
					txtab += "<td>" + xmit.transmit.my + "</td>\n";
					txtab += "<td>" + xmit.transmit.comment1 + "</td>\n";
					txtab += "<td>" + xmit.transmit.urcall + "</td>\n";
					txtab += "<td>" + xmit.transmit.rpt1 + "</td>\n";
					txtab += "<td>" + xmit.transmit.rpt2 + "</td>\n";
					txtab += "<td>" + xmit.transmit.flags + "</td>\n";
					txtab += "</tr>";
					tbody += txtab;
				});
				$('fieldset.repeater[data-repeater="' + data.repeater + '"] div.xmissions tbody').html(tbody);
				$('fieldset.repeater[data-repeater="' + data.repeater + '"] tr:last').attr("class","xmitter").attr("data-xmit",data.transmit.my);
			}
		}

	});
	
});
</script>


